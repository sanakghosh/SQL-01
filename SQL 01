-- SELECT TOP (1000) [EmployeeId]
--       ,[FirstName]
--       ,[LastName]
--       ,[Age]
--       ,[Gender]
--   FROM [test].[dbo].[EmployeeDemographics]

SELECT EmployeeId, JobTitle
FROM EmployeeSalary


-- * use for all data showing
SELECT TOP *
FROM EmployeeSalary


SELECT TOP 5 *
FROM EmployeeSalary

--DISTINCT use For Unique VALUE
SELECT DISTINCT(JobTitle)
FROM EmployeeSalary

-- COUNT use for counting number
SELECT COUNT(JobTitle) AS JobTitleCount
FROM EmployeeSalary


SELECT MAX(Salary)
FROM EmployeeSalary

SELECT MIN(Salary)
FROM EmployeeSalary

SELECT AVG(Salary)
FROM EmployeeSalary


-- If we want to show it from master branch
SELECT *
FROM test.dbo.EmployeeSalary

/* 
Where Statement 
=, < >, <, >, And, Or, Like, Null, Not Null, In
*/

-- <> means without
SELECT *
FROM EmployeeDemographics
WHERE FirstName <> 'James'

SELECT *
FROM EmployeeDemographics
WHERE Age > 30 AND Gender = 'male'


'B%' where % is refering first letter
SELECT *
FROM EmployeeDemographics
WHERE LastName LIKE 'B%'

-- '%o%' means wherever there is o, it will pop up. Also Use-  'B%n%'
SELECT *
FROM EmployeeDemographics
WHERE LastName LIKE '%o%'


-- is NULL, is NOT NULL
SELECT *
FROM EmployeeDemographics
WHERE LastName is NULL


SELECT *
FROM EmployeeDemographics
WHERE FirstName IN ('Jim', 'Bond')

/* 
Group By, Order By   -- Statement!
*/

SELECT Gender, COUNT(Gender)
FROM EmployeeDemographics
GROUP BY Gender

DESC = Descending Largest to smallest,  ASC = Ascending
SELECT Gender, COUNT(Gender) AS GenderCount
FROM EmployeeDemographics
WHERE Age > 30
GROUP BY Gender
ORDER BY GenderCount DESC

SELECT *
FROM EmployeeDemographics
ORDER BY 4 DESC, 5 DESC

/* 
Inner Joins, Full/Left/Right Outer Joins
*/

SELECT *
FROM test.dbo.EmployeeDemographics

SELECT *
FROM test.dbo.EmployeeSalary

SELECT *
FROM test.dbo.EmployeeDemographics
INNER JOIN test.dbo.EmployeeSalary
ON EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId

SELECT *
FROM test.dbo.EmployeeDemographics
FULL OUTER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId

SELECT *
FROM test.dbo.EmployeeDemographics
LEFT OUTER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId

SELECT *
FROM test.dbo.EmployeeDemographics
RIGHT OUTER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId

SELECT *
FROM test.dbo.EmployeeDemographics

SELECT *
FROM test.dbo.EmployeeSalary

SELECT EmployeeDemographics.EmployeeId, FirstName, LastName, JobTitle, Salary
FROM test.dbo.EmployeeDemographics
INNER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId

SELECT EmployeeDemographics.EmployeeId, FirstName, LastName, Salary
FROM test.dbo.EmployeeDemographics
INNER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId
WHERE FirstName <> 'Bim'
ORDER BY Salary DESC

SELECT JobTitle, AVG(Salary)
FROM test.dbo.EmployeeDemographics
INNER JOIN test.dbo.EmployeeSalary
on EmployeeDemographics.EmployeeId = EmployeeSalary.EmployeeId
WHERE JobTitle = 'Salesman'
ORDER BY JobTitle

SELECT *
FROM test.dbo.EmployeeDemographics
FULL OUTER JOIN test.dbo.WareHouseEmployeeDemographics
on EmployeeDemographics.EmployeeId = WareHouseEmployeeDemographics.EmployeeID

SELECT *
FROM test.dbo.EmployeeDemographics
UNION
SELECT *
FROM test.dbo.WareHouseEmployeeDemographics

// UNION ALL is used for check duplicate or not
SELECT *
FROM test.dbo.EmployeeDemographics
UNION ALL
SELECT *
FROM test.dbo.WareHouseEmployeeDemographics
ORDER BY EmployeeId


SELECT EmployeeId, FirstName, Age
FROM test.dbo.EmployeeDemographics
UNION
SELECT EmployeeId, JobTitle, Salary
FROM test.dbo.EmployeeSalary
ORDER BY EmployeeId